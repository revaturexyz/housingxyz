# housingxyz :: azure-devops

name: $(date:yyyyMMdd)$(rev:.rr)

stages:
  - stage: 'build'
    displayName: 'build'
    jobs:
      - job:
        displayName: 'build::angular'
        pool:
          vmImage: 'ubuntu-16.04'
        variables:
          appDir: angular
        steps:
          - script: |
              npm clean-install
            workingDirectory: $(appDir)
            displayName: 'npm install'
          - script: |
              npx ng lint
            workingDirectory: $(appDir)
            displayName: 'npm lint'
          - script: |
              npm test
            workingDirectory: $(appDir)
            displayName: 'npm test'
          - script: |
              npm run inspect -- -Dsonar.pullrequest.base=broker -Dsonar.pullrequest.branch=$PULL_REQUEST_BRANCH -Dsonar.pullrequest.github.repository=revaturexyz/housingxyz -Dsonar.pullrequest.key=$PULL_REQUEST_KEY -Dsonar.pullrequest.provider=GitHub
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
            workingDirectory: $(appDir)
            displayName: 'npm inspect::pull-request'
            env:
              PULL_REQUEST_BRANCH: $(Build.SourceBranchName)
              PULL_REQUEST_KEY: $(System.PullRequest.PullRequestNumber)
              SONAR_LOGIN: $(sonarcloud.login)
          - script: |
              npm run inspect -- -Dsonar.branch.name=$BRANCH
            condition: and(succeeded(), eq(variables['Build.Reason'], 'IndividualCI'))
            workingDirectory: $(appDir)
            displayName: 'npm inspect::branch'
            env:
              BRANCH: $(Build.SourceBranchName)
              SONAR_LOGIN: $(sonarcloud.login)
  - stage: 'pack'
    condition: succeeded('build')
    dependsOn:
      - build
    displayName: 'pack'
    jobs:
      - job:
        displayName: 'pack::angular'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadSecureFile@1
            displayName: 'angular environment::dev'
            inputs:
              secureFile: 'angular.housingxyz.dev.ts'
            name: ngenvdev
          - task: DownloadSecureFile@1
            displayName: 'angular environment::pre'
            inputs:
              secureFile: 'angular.housingxyz.pre.ts'
            name: ngenvpre
          - task: DownloadSecureFile@1
            displayName: 'angular environment::stg'
            inputs:
              secureFile: 'angular.housingxyz.stg.ts'
            name: ngenvstg
          - task: Docker@2
            inputs:
              command: 'login'
              containerRegistry: 'revaturexyz-docker'
            displayName: 'docker login'
          - script: |
              cp $(ngenvdev.secureFilePath) angular/src/environments/environment.dev.ts
              docker image build --build-arg ANGULAR_CONFIGURATION=dev -f .docker/dockerfile -t housingxyz .
              docker image tag housingxyz revaturexyz/housingxyz:dev
              docker image push revaturexyz/housingxyz:dev
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            displayName: 'docker push::dev'
          - script: |
              cp $(ngenvpre.secureFilePath) angular/src/environments/environment.pre.ts
              docker image build --build-arg ANGULAR_CONFIGURATION=pre -f .docker/dockerfile -t housingxyz .
              docker image tag housingxyz revaturexyz/housingxyz:pre
              docker image push revaturexyz/housingxyz:pre
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/broker'))
            displayName: 'docker push::pre'
          - script: |
              cp $(ngenvstg.secureFilePath) angular/src/environments/environment.stg.ts
              docker image build --build-arg ANGULAR_CONFIGURATION=stg -f .docker/dockerfile -t housingxyz .
              docker image tag housingxyz revaturexyz/housingxyz:stg
              docker image push revaturexyz/housingxyz:stg
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
            displayName: 'docker push::stg'
          - task: Docker@2
            inputs:
              command: 'logout'
              containerRegistry: 'revaturexyz-docker'
            displayName: 'docker logout'

  - stage: 'pre'
    condition: succeeded('pack')
    dependsOn:
      - pack
    displayName: 'deploy::pre'
    jobs:
      - job:
        displayName: 'deploy::pre::angular'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadSecureFile@1
            displayName: 'docker compose'
            inputs:
              secureFile: 'dockerup.housingxyz.pre.yaml'
            name: dkup
          - task: DownloadSecureFile@1
            displayName: 'terraform login'
            inputs:
              secureFile: 'terraform.key'
            name: tfkey
          - task: DownloadSecureFile@1
            displayName: 'terraform state'
            inputs:
              secureFile: 'backend.housingxyz.hcl'
            name: tfstate
          - task: DownloadSecureFile@1
            displayName: 'terraform variables'
            inputs:
              secureFile: 'terraform.housingxyz.pre.auto.tfvars'
            name: tfvars
          - script: |
              cp $(dkup.secureFilePath) .docker/
              cp $(tfkey.secureFilePath) $HOME/.terraformrc
              cp $(tfvars.secureFilePath) .terraformup/
              cd .terraformup
              printf '2\n' | terraform init -backend-config=$(tfstate.secureFilePath)
              terraform plan
              terraform apply -auto-approve
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/broker'))
            displayName: 'terraform apply::pre'
            env:
              ARM_CLIENT_ID: $(arm.client.id)
              ARM_CLIENT_SECRET: $(arm.client.secret)
              ARM_SUBSCRIPTION_ID: $(arm.subscription.id)
              ARM_TENANT_ID: $(arm.tenant.id)
              CLOUDFLARE_EMAIL: $(cloudflare.email)
              CLOUDFLARE_TOKEN: $(cloudflare.token)
  - stage: 'dev'
    condition: succeeded('pack')
    dependsOn:
      - pack
    displayName: 'deploy::dev'
    jobs:
      - job:
        displayName: 'deploy::dev::angular'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadSecureFile@1
            displayName: 'docker compose'
            inputs:
              secureFile: 'dockerup.housingxyz.dev.yaml'
            name: dkup
          - task: DownloadSecureFile@1
            displayName: 'terraform login'
            inputs:
              secureFile: 'terraform.key'
            name: tfkey
          - task: DownloadSecureFile@1
            displayName: 'terraform state'
            inputs:
              secureFile: 'backend.housingxyz.hcl'
            name: tfstate
          - task: DownloadSecureFile@1
            displayName: 'terraform variables'
            inputs:
              secureFile: 'terraform.housingxyz.dev.auto.tfvars'
            name: tfvars
          - script: |
              cp $(dkup.secureFilePath) .docker/
              cp $(tfkey.secureFilePath) $HOME/.terraformrc
              cp $(tfvars.secureFilePath) .terraformup/
              cd .terraformup
              printf '1\n' | terraform init -backend-config=$(tfstate.secureFilePath)
              terraform plan
              terraform apply -auto-approve
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            displayName: 'terraform apply::dev'
            env:
              ARM_CLIENT_ID: $(arm.client.id)
              ARM_CLIENT_SECRET: $(arm.client.secret)
              ARM_SUBSCRIPTION_ID: $(arm.subscription.id)
              ARM_TENANT_ID: $(arm.tenant.id)
              CLOUDFLARE_EMAIL: $(cloudflare.email)
              CLOUDFLARE_TOKEN: $(cloudflare.token)
  - stage: 'stg'
    condition: succeeded('pack')
    dependsOn:
      - pack
    displayName: 'deploy::stg'
    jobs:
      - job:
        displayName: 'deploy::stg::angular'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadSecureFile@1
            displayName: 'docker compose'
            inputs:
              secureFile: 'dockerup.housingxyz.stg.yaml'
            name: dkup
          - task: DownloadSecureFile@1
            displayName: 'terraform login'
            inputs:
              secureFile: 'terraform.key'
            name: tfkey
          - task: DownloadSecureFile@1
            displayName: 'terraform state'
            inputs:
              secureFile: 'backend.housingxyz.hcl'
            name: tfstate
          - task: DownloadSecureFile@1
            displayName: 'terraform variables'
            inputs:
              secureFile: 'terraform.housingxyz.stg.auto.tfvars'
            name: tfvars
          - script: |
              cp $(dkup.secureFilePath) .docker/
              cp $(tfkey.secureFilePath) $HOME/.terraformrc
              cp $(tfvars.secureFilePath) .terraformup/
              cd .terraformup
              printf '3\n' | terraform init -backend-config=$(tfstate.secureFilePath)
              terraform plan
              terraform apply -auto-approve
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
            displayName: 'terraform apply::stg'
            env:
              ARM_CLIENT_ID: $(arm.client.id)
              ARM_CLIENT_SECRET: $(arm.client.secret)
              ARM_SUBSCRIPTION_ID: $(arm.subscription.id)
              ARM_TENANT_ID: $(arm.tenant.id)
              CLOUDFLARE_EMAIL: $(cloudflare.email)
              CLOUDFLARE_TOKEN: $(cloudflare.token)
trigger:
  branches:
    include:
      - master
      - broker
  tags:
    include:
      - '*'

pr:
  - master
  - broker

variables:
  - group: azure.vars
  - group: cloudflare.vars
  - group: sonarcloud.vars