# account :: azure-devops

name: $(date:yyyyMMdd)$(rev:.rr)

stages:
  - stage: 'build'
    displayName: 'build'
    jobs:
      - job:
        displayName: 'build::aspnet'
        pool: Default
        steps:
          - task: UseDotNet@2
            displayName: 'dotnet sdk::2.2'
            inputs:
              version: '2.2.x'
          - script: dotnet tool install --global dotnet-sonarscanner
            displayName: 'dotnet install'
          - script: dotnet sonarscanner begin /k:"accountxyz" /n:"ACCOUNT" /o:"revaturexyz" /v:"0.0.0"
              /d:sonar.branch.name=$BUILD_SOURCEBRANCHNAME
              /d:sonar.cs.opencover.reportsPaths=**/TestResults/*/coverage.opencover.xml
              /d:sonar.cs.vstest.reportsPaths=**/*.trx
              /d:sonar.host.url=https://sonarcloud.io/
              /d:sonar.login=$SONAR_LOGIN
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            displayName: 'dotnet sonarscanner::branch'
            workingDirectory: 'account/src'
            env:
              SONAR_LOGIN: $(sonarcloud.login)
          - script: dotnet sonarscanner begin /k:"accountxyz" /n:"ACCOUNT" /o:"revaturexyz" /v:"0.0.0"
              /d:sonar.cs.opencover.reportsPaths=**/TestResults/*/coverage.opencover.xml
              /d:sonar.cs.vstest.reportsPaths=**/*.trx
              /d:sonar.host.url=https://sonarcloud.io/
              /d:sonar.login=$SONAR_LOGIN
              /d:sonar.pullrequest.base=$SYSTEM_PULLREQUEST_TARGETBRANCH
              /d:sonar.pullrequest.branch=$SYSTEM_PULLREQUEST_SOURCEBRANCH
              /d:sonar.pullrequest.github.repository=$BUILD_REPOSITORY_NAME
              /d:sonar.pullrequest.key=$SYSTEM_PULLREQUEST_PULLREQUESTNUMBER
              /d:sonar.pullrequest.provider=$BUILD_REPOSITORY_PROVIDER
            condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
            displayName: 'dotnet sonarscanner::pull-request'
            workingDirectory: 'account/src'
            env:
              SONAR_LOGIN: $(sonarcloud.login)
          - task: UseDotNet@2
            displayName: 'dotnet sdk::3.0'
            inputs:
              version: '3.0.x'
          - script: dotnet restore
            displayName: 'dotnet restore'
            workingDirectory: 'account/src'
          - script: dotnet build --configuration Release --no-incremental --no-restore
            displayName: 'dotnet build'
            workingDirectory: 'account/src'
          - script: dotnet test
              --settings coverletArgs.runsettings
              --logger trx
              --configuration Release
              --no-build
            displayName: 'dotnet test'
            workingDirectory: 'account/src'
          - script: dotnet sonarscanner end /d:sonar.login=$SONAR_LOGIN
            displayName: 'dotnet sonarscanner end'
            workingDirectory: 'account/src'
            env:
              SONAR_LOGIN: $(sonarcloud.login)
          - task: PublishTestResults@2
            displayName: 'publish result::unit-test'
            inputs:
              testRunner: VSTest
              testResultsFiles: '**/*.trx'
          - task: PublishCodeCoverageResults@1
            displayName: 'publish result::code-coverage'
            inputs:
              codeCoverageTool: cobertura
              summaryFileLocation: '**/TestResults/*/coverage.cobertura.xml'

  - stage: 'pack'
    condition: succeeded('build')
    dependsOn:
      - build
    displayName: 'pack'
    jobs:
      - job:
        displayName: 'pack::aspnet'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadSecureFile@1
            displayName: 'aspnet appsettings::dev'
            inputs:
              secureFile: 'aspnet.account.dev.json'
            name: appconfigdev
          - task: DownloadSecureFile@1
            displayName: 'aspnet appsettings::stg'
            inputs:
              secureFile: 'aspnet.account.stg.json'
            name: appconfigstg
          - task: Docker@2
            inputs:
              command: 'login'
              containerRegistry: 'revaturexyz-docker'
            displayName: 'docker login'
          - script: |
              set -e
              cd account
              cp $(appconfigdev.secureFilePath) src/Revature.Account.Api/appsettings.json
              docker image build -f .docker/dockerfile -t account .
              docker image tag account revaturexyz/account:dev
              docker image push revaturexyz/account:dev
            condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/master'))
            displayName: 'docker push::dev'
          - script: |
              set -e
              cd account
              cp $(appconfigstg.secureFilePath) src/Revature.Account.Api/appsettings.json
              docker image build -f .docker/dockerfile -t account .
              docker image tag account revaturexyz/account:stg
              docker image push revaturexyz/account:stg
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
            displayName: 'docker push::stg'
          - task: Docker@2
            inputs:
              command: 'logout'
              containerRegistry: 'revaturexyz-docker'
            displayName: 'docker logout'

  - stage: 'dev'
    condition: succeeded('pack')
    dependsOn:
      - pack
    displayName: 'deploy::dev'
    jobs:
      - job:
        displayName: 'deploy::dev::aspnet'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadSecureFile@1
            displayName: 'docker compose'
            inputs:
              secureFile: 'dockerup.account.dev.yaml'
            name: dkup
          - task: DownloadSecureFile@1
            displayName: 'terraform login'
            inputs:
              secureFile: 'terraform.key'
            name: tfkey
          - task: DownloadSecureFile@1
            displayName: 'terraform state'
            inputs:
              secureFile: 'backend.account.hcl'
            name: tfstate
          - task: DownloadSecureFile@1
            displayName: 'terraform variables'
            inputs:
              secureFile: 'terraform.account.dev.auto.tfvars'
            name: tfvars
          - script: |
              set -e
              cd account
              cp $(dkup.secureFilePath) .docker/
              cp $(tfkey.secureFilePath) $HOME/.terraformrc
              cp $(tfvars.secureFilePath) .terraformio/
              cd .terraformio
              printf '1\n' | terraform init -backend-config=$(tfstate.secureFilePath)
              terraform plan
              terraform apply -auto-approve
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/master'))
            displayName: 'terraform apply::dev'
            env:
              ARM_CLIENT_ID: $(arm.client.id)
              ARM_CLIENT_SECRET: $(arm.client.secret)
              ARM_SUBSCRIPTION_ID: $(arm.subscription.id)
              ARM_TENANT_ID: $(arm.tenant.id)
              CLOUDFLARE_EMAIL: $(cloudflare.email)
              CLOUDFLARE_TOKEN: $(cloudflare.token)

  - stage: 'stg'
    condition: succeeded('pack')
    dependsOn:
      - pack
    displayName: 'deploy::stg'
    jobs:
      - job:
        displayName: 'deploy::stg::aspnet'
        pool:
          vmImage: 'ubuntu-16.04'
        steps:
          - task: DownloadSecureFile@1
            displayName: 'docker compose'
            inputs:
              secureFile: 'dockerup.account.stg.yaml'
            name: dkup
          - task: DownloadSecureFile@1
            displayName: 'terraform login'
            inputs:
              secureFile: 'terraform.key'
            name: tfkey
          - task: DownloadSecureFile@1
            displayName: 'terraform state'
            inputs:
              secureFile: 'backend.account.hcl'
            name: tfstate
          - task: DownloadSecureFile@1
            displayName: 'terraform variables'
            inputs:
              secureFile: 'terraform.account.stg.auto.tfvars'
            name: tfvars
          - script: |
              set -e
              cd account
              cp $(dkup.secureFilePath) .docker/
              cp $(tfkey.secureFilePath) $HOME/.terraformrc
              cp $(tfvars.secureFilePath) .terraformio/
              cd .terraformio
              printf '3\n' | terraform init -backend-config=$(tfstate.secureFilePath)
              terraform plan
              terraform apply -auto-approve
            condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
            displayName: 'terraform apply::stg'
            env:
              ARM_CLIENT_ID: $(arm.client.id)
              ARM_CLIENT_SECRET: $(arm.client.secret)
              ARM_SUBSCRIPTION_ID: $(arm.subscription.id)
              ARM_TENANT_ID: $(arm.tenant.id)
              CLOUDFLARE_EMAIL: $(cloudflare.email)
              CLOUDFLARE_TOKEN: $(cloudflare.token)

trigger:
  branches:
    include:
      - master
  tags:
    include:
      - '*'
  paths:
    include:
      - account

pr:
  - master

variables:
  - group: azure.vars
  - group: cloudflare.vars
  - group: sonarcloud.vars
